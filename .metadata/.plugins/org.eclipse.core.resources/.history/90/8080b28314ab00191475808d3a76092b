package in.grocery;

import java.util.HashMap;
import java.util.Map;

import in.grocery.inventory.items.Item;

/**
 * @author Manosivam
 *
 */

//TODO: do we need Interface for this???
public class Cart{
	
	private Map<Item, Integer> itemCounts;
	double cartValue;//live cost of the items in the cart.
	double finalPrize; 
	
	public Cart(){
		itemCounts = new HashMap<Item, Integer>();
		cartValue = 0;
		finalPrize = 0;
	}
	
	public Map<Item, Integer> getItemCounts()
	{
		return this.itemCounts;
	}
	
	public void setItemCounts(Map<Item,Integer> itemCounts)
	{
		this.itemCounts = itemCounts;
	}
	
	public double getTotalAmountSaved()
	{
		return this.cartValue - this.finalPrize;
	}
	
	public double getTotalPrizeBeforeApplyingDiscount()
	{
		return this.cartValue;
	}
	
	public double getFinalPrize()
	{
		return this.finalPrize;
	}
	
	public double computeFinalPrize(boolean applyDiscount)
	{
		if(!applyDiscount) 
		{
			this.finalPrize = this.cartValue; 
		}
		else 
		{
			//apply discount. 
			for(Map.Entry<Item, Integer> entry: this.itemCounts.entrySet())
			{
				
			}
		}
	}
	
	/*
	 * Can load Items one by One.
	 */
	public void loadItem(Item item)
	{
		int count = 1,earlierCount;
		if(this.itemCounts.containsKey(item))
		{
			earlierCount = this.itemCounts.get(item);
			count+=earlierCount;
		}
		this.itemCounts.put(item, count);
		this.cartValue+= (item.getMRP() + item.getTax()) * 1; 
	}
	
	/*
	 * can unload item one by one.
	 */
	public void unLoadItem(Item item)
	{
		this.cartValue-= (item.getMRP()+item.getTax()) *1;
		this.itemCounts.remove(item);
	}
	
}
