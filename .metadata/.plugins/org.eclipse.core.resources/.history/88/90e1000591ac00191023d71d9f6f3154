package in.grocery.inventory;

import java.util.ArrayList;
import java.util.Map;

import in.grocery.backend.Backend;
import in.grocery.logs.Logger;

/**
 * @author Manosivam
 *
 */
public class Inventory implements IInventory{

	Logger logger;
	private static Inventory inventory;
	private Backend backend;

	private Map<Item, Integer> itemsAvailable;
	public Map<Integer, Item> itemIdItemMap;
	
	private ArrayList<ItemType> itemTypesAvailable;
	public Map<String,Double> taxItemTypePercentMap;

	private Map<String,Double> earningsPerDaySoFarMap;
	
	private Inventory() {
		logger = Logger.getInstance();
		backend = Backend.getInstance(); //creates connectivity with backend layer.
	}
	
	public static Inventory getInstance() {
		if(inventory == null)
		{
			inventory = new Inventory();
		}
		return inventory;
	}
	
	@Override
	public Item getItemFromId(int id) throws ItemException
	{
		Item item = null;
		if(itemIdItemMap == null)
		{
			item = backend.getItemFromId(id);
		}
		else 
		{
			if(itemIdItemMap.containsKey(id))
			{
				item = itemIdItemMap.get(id);
			}
		}
		if(item == null)
		{
			throw new ItemException("Item not available in inventory");
		}
	}
	
	@Override
	public Map<Item, Integer> getItemsQuantityPairInInventory() {
		return backend.getAvailableItemsQuantityPair();
	}

	@Override
	public double getTotalSaleHappenedForTheDay(String dateString) {
		return backend.getTotalSaleHappened(dateString);
	}

	@Override
	public void printRemainingItemsQuantityInInventory() {
		Map<Item,Integer> availableItemDetails = getItemsQuantityPairInInventory();
		for(Map.Entry<Item,Integer> entry: availableItemDetails.entrySet())
		{
			if(entry.getValue() > 0)
			{
				logger.logMessage("Item id: ["+entry.getKey().getId()+"] Item name:["+entry.getKey().getName()+"], quantity:["+entry.getValue()+"].");
			}
		}
	}

	@Override
	public Map<Item,Integer> addItemsInInventory(String name, double mrp, String itemTypeName, int quantity) throws ItemTypeException, ItemException {
		Item itemToAdd = new Item(name, mrp,itemTypeName);
		return backend.addNewItemAndQuantityInDB(itemToAdd, quantity);
	}

	@Override
	public ItemType addNewItemTypeInInventory(String name) throws ItemTypeException
	{
		ItemType type = new ItemType(name); 
		
		ItemType itemTypeFromDB = backend.addItemTypeInDB(type);
		
		return itemTypeFromDB;
	}
	
	@Override
	public ItemType getItemTypeFromId(int id)
	{
		return backend.getItemTypeFromId(id); 
	}
	
	@Override
	public ItemType updateTaxForItemType(ItemType type, double newTax)
	{
		// TODO Auto-generated method stub
		//BackendLayer.updateTaxForItemTypeInDb(type, newTax);
		return null;
	}
	
	@Override
	public boolean updateSoldItemsDetails(Map<Item, Integer> itemsCount) {
		return backend.updateSoldItemsDetails(itemsCount);
	}

	@Override
	public void updateSalesPriceForTheDay(String date, double costToGrocery) {
		backend.updateSalesPriceForTheDay(date,costToGrocery);
	}

	@Override
	public boolean isItemAvailableForTheGivenQuantityInStock(Item item,int quantity) {
		return backend.isItemAvailableForTheGivenQuantityInStock(item, quantity);
	}
	
}
